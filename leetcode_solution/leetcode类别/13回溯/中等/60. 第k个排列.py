
'''给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。'''
class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        #全排列，转换成--字典序列-组合数学
        '''
        以1开头的排列总共有3!个，原因是第一个位置是1，剩下3个位置可以随便排列，有6个
以2开头的排列总共有3!个，原因是第一个位置是2，剩下3个位置可以随便排列，有6个
此时已经有12个排列
所以剩下的两个排列即第14个排列一定在以3开头的排列中
用这种方式继续缩减数量，以3开头的排列中最小的为[3,1,2,4]，3已经固定，那么就找[1,2,4]的全排列的第2个排列，就是整个排列的第14个排列

以每个数字开头的全排列有(n-1)! 种。我们先将1-n这些数存到一个数组cc中，然后通过c=(k-1)/(n-1)！确定当前k个数，是以哪一个数字c+1开头的，从数组中取出该数，加到字符串里，并且在数组中删掉这个数（因为该数已经用过了，接下来我们只能从剩下的数中取）。

这时已经解决掉了c*(n-1)! 个数，还剩下k-c*(n-1)！个数，作为新的k，继续用数组中的数来进行填充，直到把所有的数都填完

'''
        seq, k, fact = '', k-1, math.factorial(n-1)
        perm = [i for i in range(1, n+1)]
        for i in reversed(range(n)):
            curr = perm[k//fact]
            seq += str(curr)
            perm.remove(curr)
            if i > 0:
                k %= fact
                fact //= i
        return seq