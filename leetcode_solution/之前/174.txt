问题难度: ? ? ? ? ?

问题描述

恶魔抓了公主(P)然后将她囚禁在地牢的右下角. 地牢由M X N个放置在2维格子中的房间组成. 我们勇敢的骑士(K)起始位于地牢的左上角, 必须穿过地牢才能救出公主.

骑士有一个使用正数表示的初始健康值. 一旦健康值掉到0或者以下, 那么他立刻会死去.

一些房间是被恶魔守护的,一旦骑士进入这些房间就会丢失健康值(负数), 其它的房间要么是0, 要么是包含魔法的魔法球来提高骑士的健康(正数).

为了尽可能快地到达公主处, 骑士决定每一步只会向下或者向右移动.

写一个函数来确定能保证骑士拯救到公主的最小初始生命值.

例如, 给定下面的地牢, 沿着最优路径右->右->下->下的前提下, 在骑士的最小生命值必须至少为7:


注意:

骑士的健康没有上限
任意房间都有可能包含威胁或者能量增加, 即使是骑士进入的第一个房间和公主被囚禁的最后一个房间
解题思路

一般这类问题都可以使用动态规划法进行求解:

首先, 使用数学的方式定义好问题: 使用dp[i][j]来存储当前位置(i,j)起始出发的血量; 接下来考虑递推公式, 需要考虑决定影响每个位置的因素, 骑士会挂主要是因为去了下一个房间时, 当前的血量小于要去的下一个位置的血量, 而能去的房间只能是右边和下边, 所以当前位置的血量可能由右边房间和下边房间决定, 进一步说: 由较小的血量决定的.因为我们需要求的是较小的起始位置血量. 由于我们是逆向推导的, 因此骑士进入下一个房间进行PK之前的血量是等于进入当前房间进行PK之后的血量. 当用当前房间右边或者下边房间的起始值中的较小值减去当前房间的值, 如果小于等于0, 那么说明当前房间的值是正数, 最小生命值取1就可以了; 如果大于0, 则说明都有可能, 但是骑士进入当前房间后的生命值就一定要是这个差值. 因此得到递推方程: dp[i][j] = max(1, min(d[i+1][j], d[i][j+1])-d[i][j]).

代码

class Solution(object):
    def calculateMinimumHP(self, dungeon):
        """
        :type dungeon: List[List[int]]
        :rtype: int
        """
        if len(dungeon) == 0:            return 0
        m, n = len(dungeon), len(dungeon[0])
        INT_MAX = 2147483647
        dp = [[INT_MAX for _ in range(n+1)] for _ in range(m+1)]
        dp[m][n-1], dp[m-1][n] = 1, 1
        for i in range(m-1, -1, -1):            for j in range(n-1, -1, -1):
                tmp = ((dp[i+1][j] - dungeon[i][j]) if dp[i+1][j] <  dp[i][j+1] else (dp[i][j+1] - dungeon[i][j]))
                dp[i][j] = 1 if 1 > tmp else tmp        return dp[0][0]
s = Solution()
dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
print(s.calculateMinimumHP(dungeon))
dungeon = [[0,0]]
print(s.calculateMinimumHP(dungeon))
7
1